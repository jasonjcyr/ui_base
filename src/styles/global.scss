@use '../styles' as styles;
@use '../styles/mixins/generate-text-utilities' as textUtils;

// ==============================
// Base theme variables
// ==============================
@include styles.apply-theme(styles.$light-theme, ':root');
@include styles.apply-theme(styles.$dark-theme, '[data-theme="dark"]');
:root {
  // Light theme colors as CSS custom properties
  @each $color-name, $color-map in styles.$colors-light {
    @each $shade, $value in $color-map {
      --color-#{'' + $color-name}-#{$shade}: #{$value};
    }
  }
}

[data-theme='dark'] {
  // Dark theme colors override the same custom properties
  @each $color-name, $color-map in styles.$colors-dark {
    @each $shade, $value in $color-map {
      --color-#{'' + $color-name}-#{$shade}: #{$value};
    }
  }
}

body {
  background-color: var(--background);
  color: var(--text);
}
:root {
  @include styles.generate-theme(styles.$semantic-colors-light);
}

[data-theme='dark'] {
  @include styles.generate-theme(styles.$semantic-colors-dark);
}

// ==============================
// Text color utilities
// ==============================
:root {
  @each $color-name, $color-map in styles.$colors-light {
    @each $shade, $value in $color-map {
      .text-#{'' + $color-name}-#{$shade} {
        color: #{$value} !important;
      }
    }
  }

  @each $semantic-color-name, $semantic-map in styles.$semantic-colors-light {
    @each $variant, $hex in $semantic-map {
      .text-#{$semantic-color-name}-#{$variant} {
        color: #{$hex} !important;
      }
    }
  }
}

@include textUtils.generate-text-utilities(
  styles.$colors-light,
  styles.$semantic-colors-light,
  ':root'
);
@include textUtils.generate-text-utilities(
  styles.$colors-dark,
  styles.$semantic-colors-dark,
  '[data-theme="dark"]'
);
