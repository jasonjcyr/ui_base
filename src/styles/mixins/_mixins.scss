@use 'sass:map';
@use 'sass:math';
@use '../tokens/dark-colors' as *;
@use '../tokens/light-colors' as *;
@use '../tokens/typography' as *;

/// Flexbox utility mixin
@mixin flexbox(
  $includeDisplay: true,
  $direction: false,
  $wrap: false,
  $justify-content: false,
  $align-items: false
) {
  @if $includeDisplay {
    display: flex;
  }
  @if $direction {
    flex-direction: $direction;
  }
  @if $wrap {
    flex-wrap: $wrap;
  }
  @if $justify-content {
    justify-content: $justify-content;
  }
  @if $align-items {
    align-items: $align-items;
  }
}

/// Centers content horizontally and vertically using flexbox
@mixin center {
  @include flexbox($justify-content: center, $align-items: center);
}

/// Responsive media query helper
@mixin respond-to($breakpoint) {
  $value: map.get($breakpoint-values, $breakpoint);

  @if $value {
    @media (min-width: $value) {
      @content;
    }
  }
}

/// Outputs CSS variables from a color map
@mixin generate-theme($color-map) {
  @each $color, $codes in $color-map {
    @each $code, $value in $codes {
      --#{"" + $color}-#{$code}: #{$value};
    }
  }
}

/// Applies a theme by targeting a selector (e.g., :root or [data-theme='dark'])
@mixin apply-theme($theme-map, $selector) {
  #{$selector} {
    @each $name, $value in $theme-map {
      --#{$name}-base: #{$value};
    }
  }
}

/*
  Rem Calculations
  Allows us to calculate rem sizing for any element based off the base font size variable.
  We strip the unit first, to allow to css to do proper calculations regaurdless of property units.
  The base font size variable should be the same as the base font size applied the html tag in the global css.
*/

$font-base: 16;
// Default base font size, can be overridden in theme settings
@function strip-unit($num) {
  @return math.div($num, ($num * 0 + 1));
}

@function rem($num, $base: $font-base) {
  $size: strip-unit($num);

  @return math.div($size, $base) * 1rem;
}
